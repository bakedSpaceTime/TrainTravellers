version: '3.3'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181"
    hostname: zookeeper
  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: Kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: kafka-ti-acit3855.eastus2.cloudapp.azure.com # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka-ti-acit3855.eastus2.cloudapp.azure.com:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - "zookeeper"
  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'traintravellers'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'train_user'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'TrAiNtRaVeLlErs'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'N07-@-Tr@!n-U53r'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    expose:
      # Opens port 3306 on the container
      - '3306'
    # Where our data will be persisted
    volumes:
      - my-db:/var/lib/mysql
  receiver:
    build:
      context: ../Receiver
      dockerfile: Dockerfile
    image: receiver:vt
    ports:
      - 8080:8080
    hostname: receiver
    networks:
      - traintravellers
    depends_on:
      - "kafka"
  storage:
    build:
      context: ../Storage
      dockerfile: Dockerfile
    image: storage:vt
    ports:
      - 8090:8090
    hostname: storage
    networks:
      - traintravellers
    depends_on:
      - "kafka"
      - "db"
  processing:
    build:
      context: ../Processing
      dockerfile: Dockerfile
    image: processing:vt
    ports:
      - 8100:8100
    hostname: processing
    networks:
      - traintravellers
    depends_on:
      - "storage"
  audit:
    build:
      context: ../Audit
      dockerfile: Dockerfile
    image: audit:vt
    ports:
      - 9010:9010
    hostname: audit
    networks:
      - traintravellers
    depends_on:
      - "kafka"
  dashboard:
    build:
      context: ../Dashboard-UI
      dockerfile: Dockerfile
    image: dashboard:vt
    ports:
      - "3000:3000"
    hostname: dashboard
    networks:
      - traintravellers
    depends_on:
      - "processing"
      - "audit"
networks:
  traintravellers: {}
# Names our volume
volumes:
  my-db:
